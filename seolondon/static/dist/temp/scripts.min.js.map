{"version":3,"sources":["scripts.min.js","main.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","$","document","ready","unslider","accordion","selector","trigger","modal","dropdown","click","e","location","pathname","replace","this","hostname","hash","slice","animate","scrollTop","offset","top","preventDefault","Header","navbarId","headerId","$navbar","$header","$mobileToggle","find","$mobileMenu","children","$window","window","scrolling","lastScrollPosition","menuLastToggled","Date","bind","scroll","addClass","value","_this","resize","hasClass","width","closeMobileMenu","toggleMobileMenu","$link","closest","$menu","not","slideUp","removeClass","slideDown","scrollPosition","now","getTime","openMobileMenu","_this2","setTimeout","fadeIn","_this3","fadeOut"],"mappings":"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","file":"scripts.min.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n$(document).ready(function ($) {\n  $('.my-slider').unslider();\n\n  $('.ui.accordion').accordion({\n    selector: {\n      trigger: '.title'\n    }\n  });\n\n  // open second modal on first modal buttons\n  $('.success.story.modal').modal('attach events', '.sucess.story.button');\n\n  $('.ui.dropdown').dropdown();\n\n  $('a[href*=\"#\"]:not([href=\"#\"])').click(function (e) {\n    if (location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\\//, '') && location.hostname == this.hostname) {\n      var target = $(this.hash);\n      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');\n\n      if (target.length) {\n        $('html, body').animate({\n          scrollTop: target.offset().top - 50\n        }, 500);\n\n        e.preventDefault();\n      }\n    }\n  });\n});\n\n/**\n * JavaScript for the header and navigation\n * @class Header\n */\n\nvar Header = function () {\n  function Header(navbarId, headerId) {\n    _classCallCheck(this, Header);\n\n    this.$navbar = $(navbarId);\n    this.$header = $(headerId);\n    this.$mobileToggle = this.$navbar.find('.mobile.toggle a');\n    this.$mobileMenu = this.$navbar.children('.ui.mobile.container');\n    this.$window = $(window);\n    this.scrolling = false;\n    this.lastScrollPosition = 9999999;\n    this.menuLastToggled = new Date(0);\n\n    this.bind();\n    this.scroll();\n\n    if (this.$window.scrollTop() >= 200) {\n      this.$navbar.addClass('slide-down');\n    }\n  }\n\n  /**\n   * Bind the header to scroll and toggle events\n   */\n\n\n  _createClass(Header, [{\n    key: 'bind',\n    value: function bind() {\n      var _this = this;\n\n      this.$window.scroll(this.scroll.bind(this));\n\n      this.$window.resize(function () {\n        if (_this.$navbar.hasClass('mobile open') && _this.$window.width() >= 768) {\n          _this.closeMobileMenu();\n        }\n      });\n\n      this.$mobileToggle.click(this.toggleMobileMenu.bind(this));\n\n      this.$mobileMenu.find('.menu-item-has-children').click(function (e) {\n        var $link = $(e.target).closest('.menu-item-has-children');\n        var $menu = $link.children('ul');\n\n        if (!$menu.hasClass('open')) {\n          _this.$mobileMenu.find('.menu-item-has-children ul').not($menu).slideUp(300).removeClass('open');\n          $menu.slideDown(300).addClass('open');\n          e.preventDefault();\n        }\n      });\n    }\n\n    /**\n     * Handle the window scroll event\n     */\n\n  }, {\n    key: 'scroll',\n    value: function scroll() {\n      var scrollPosition = this.$window.scrollTop();\n\n      if (scrollPosition > 100) {\n        if (this.lastScrollPosition === scrollPosition) {\n          return;\n        }\n\n        if (!this.scrolling) {\n          this.scrolling = true;\n          this.$navbar.addClass('scrolling');\n        } else if (this.lastScrollPosition < scrollPosition || scrollPosition < 200) {\n          this.$navbar.addClass('slide-up').removeClass('slide-down');\n        } else {\n          this.$navbar.removeClass('slide-up').addClass('slide-down');\n        }\n      } else {\n        if (this.scrolling) {\n          this.scrolling = false;\n\n          // prevent animations from occurring\n          this.$navbar.removeClass('scrolling').removeClass('slide-up').removeClass('slide-down');\n        }\n      }\n\n      this.lastScrollPosition = scrollPosition;\n    }\n\n    /**\n     * Show/hide the mobile menu\n     */\n\n  }, {\n    key: 'toggleMobileMenu',\n    value: function toggleMobileMenu() {\n      var now = new Date();\n\n      // debouncing\n      if (now.getTime() - 700 < this.menuLastToggled.getTime()) {\n        return false;\n      } else {\n        this.menuLastToggled = new Date();\n      }\n\n      // toggling\n      if (this.$navbar.hasClass('mobile open')) {\n        this.closeMobileMenu();\n      } else {\n        this.openMobileMenu();\n      }\n    }\n\n    /**\n     * Open the mobile menu and handle animations\n     */\n\n  }, {\n    key: 'openMobileMenu',\n    value: function openMobileMenu() {\n      var _this2 = this;\n\n      $('.mobile.slice').addClass('active');\n      this.$navbar.addClass('mobile open');\n      $('body').addClass('mobile open');\n\n      setTimeout(function () {\n        _this2.$navbar.find('.ui.mobile.container').fadeIn(350);\n      }, 300);\n    }\n\n    /**\n     * Close the mobile menu, handling animations\n     */\n\n  }, {\n    key: 'closeMobileMenu',\n    value: function closeMobileMenu() {\n      var _this3 = this;\n\n      this.$mobileMenu.find('.menu-item-has-children ul').slideUp(300).removeClass('open');\n      this.$navbar.find('.ui.mobile.container').fadeOut(300);\n      $('body').removeClass('mobile open');\n\n      setTimeout(function () {\n        _this3.$navbar.removeClass('mobile open');\n        $('.mobile.slice').removeClass('active');\n        _this3.scroll();\n      }, 300);\n    }\n  }]);\n\n  return Header;\n}();\n\n$(document).ready(function () {\n  return new Header('#navigation-bar', '#masthead');\n});","$(document).ready(function ($) {\n  $('.my-slider').unslider();\n\n  $('.ui.accordion')\n    .accordion({\n      selector: {\n        trigger: '.title'\n      }\n    });\n\n  // open second modal on first modal buttons\n  $('.success.story.modal')\n    .modal('attach events', '.sucess.story.button');\n\n  $('.ui.dropdown').dropdown();\n\n  $('a[href*=\"#\"]:not([href=\"#\"])').click(function (e) {\n    if (location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\\//, '') && location.hostname == this.hostname) {\n      var target = $(this.hash);\n      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');\n\n      if (target.length) {\n        $('html, body').animate({\n          scrollTop: target.offset().top - 50\n        }, 500);\n\n        e.preventDefault();\n      }\n    }\n  });\n});\n\n/**\n * JavaScript for the header and navigation\n * @class Header\n */\nclass Header {\n  constructor(navbarId, headerId) {\n    this.$navbar = $(navbarId);\n    this.$header = $(headerId);\n    this.$mobileToggle = this.$navbar.find('.mobile.toggle a');\n    this.$mobileMenu = this.$navbar.children('.ui.mobile.container');\n    this.$window = $(window);\n    this.scrolling = false;\n    this.lastScrollPosition = 9999999;\n    this.menuLastToggled = new Date(0);\n\n    this.bind();\n    this.scroll();\n\n    if (this.$window.scrollTop() >= 200) {\n      this.$navbar.addClass('slide-down');\n    }\n  }\n\n  /**\n   * Bind the header to scroll and toggle events\n   */\n  bind() {\n    this.$window.scroll(this.scroll.bind(this));\n\n    this.$window.resize(() => {\n      if (this.$navbar.hasClass('mobile open') && this.$window.width() >= 768) {\n        this.closeMobileMenu();\n      }\n    });\n\n    this.$mobileToggle.click(this.toggleMobileMenu.bind(this));\n\n    this.$mobileMenu.find('.menu-item-has-children').click((e) => {\n      const $link = $(e.target).closest('.menu-item-has-children');\n      const $menu = $link.children('ul');\n\n      if (!$menu.hasClass('open')) {\n        this.$mobileMenu.find('.menu-item-has-children ul').not($menu).slideUp(300).removeClass('open');\n        $menu.slideDown(300).addClass('open');\n        e.preventDefault();\n      }\n    });\n  }\n\n  /**\n   * Handle the window scroll event\n   */\n  scroll() {\n    let scrollPosition = this.$window.scrollTop();\n\n    if (scrollPosition > 100) {\n      if (this.lastScrollPosition === scrollPosition) {\n        return;\n      }\n\n      if (!this.scrolling) {\n        this.scrolling = true;\n        this.$navbar.addClass('scrolling');\n      } else if (this.lastScrollPosition < scrollPosition || scrollPosition < 200) {\n        this.$navbar.addClass('slide-up').removeClass('slide-down');\n      } else {\n        this.$navbar.removeClass('slide-up').addClass('slide-down');\n      }\n    } else {\n      if (this.scrolling) {\n        this.scrolling = false;\n\n        // prevent animations from occurring\n        this.$navbar\n          .removeClass('scrolling')\n          .removeClass('slide-up')\n          .removeClass('slide-down');\n      }\n    }\n\n    this.lastScrollPosition = scrollPosition;\n  }\n\n  /**\n   * Show/hide the mobile menu\n   */\n  toggleMobileMenu() {\n    const now = new Date();\n\n    // debouncing\n    if (now.getTime() - 700 < this.menuLastToggled.getTime()) {\n      return false;\n    } else {\n      this.menuLastToggled = new Date();\n    }\n\n    // toggling\n    if (this.$navbar.hasClass('mobile open')) {\n      this.closeMobileMenu();\n    } else {\n      this.openMobileMenu();\n    }\n  }\n\n  /**\n   * Open the mobile menu and handle animations\n   */\n  openMobileMenu() {\n    $('.mobile.slice').addClass('active');\n    this.$navbar.addClass('mobile open');\n    $('body').addClass('mobile open');\n\n    setTimeout(() => {\n      this.$navbar.find('.ui.mobile.container').fadeIn(350);\n    }, 300);\n  }\n\n  /**\n   * Close the mobile menu, handling animations\n   */\n  closeMobileMenu() {\n    this.$mobileMenu.find('.menu-item-has-children ul').slideUp(300).removeClass('open');\n    this.$navbar.find('.ui.mobile.container').fadeOut(300);\n    $('body').removeClass('mobile open');\n\n    setTimeout(() => {\n      this.$navbar.removeClass('mobile open');\n      $('.mobile.slice').removeClass('active');\n      this.scroll();\n    }, 300);\n  }\n}\n\n$(document).ready(() => new Header('#navigation-bar', '#masthead'));\n"],"sourceRoot":"/source/"}